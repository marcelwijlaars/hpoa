#!/bin/sh 
# exit codes
#	0 - successfully unpacked ilo/oa smart components
#	1 - generic failures FIXME
#	2 - smart components previously unpacked
#	3 - unpacking failed
#	4 - No SCEXE files present.

RC_SUCCESS=0
RC_FAILURE=1
RC_PREVIOUS=2
RC_UNPACKFAIL=3
RC_NOSCEXE=4

WARHAWK=0
COLOSSUS=1
DWIGHT=2
GEORGE=3
NEWMAN=5

UPGRADE_TYPE=$1

ALARMTIME=300

usage(){ 
	echo "$0 <ilo_type>"
	echo "  <ilo_type>    The ilo type: iLO2, iLO3, iLO4"
}

if [ "x$UPGRADE_TYPE" = "x" ]; then
	usage
	exit 1
fi

if [ "z$2" = "zdebug" ]; then
	DEBUG=1
else
	DEBUG=0
fi

if [ $DEBUG -eq 1 ] && [ "z$3" != "z" ]; then
	BASEDIR=$3
else
	BASEDIR=/ramdisk
fi

UNPACK_DIR=$BASEDIR/fwcd/local
SCEXE_DIR=$BASEDIR/fwcd/fs
INSTALL_DIR=

dbg_echo() {
	local RC=$?
	if [ $DEBUG -eq 1 ]; then
		echo "$(date) - PID=$$ RC=$RC $@"
	fi
	return $RC
}

MAXTRY=3

# Script used to unpack scexe files on FW CD/DVD 
# for OA, ProLiant iLO smart components

# Get lock
LOCKFILE=$BASEDIR/unpack-scexe.lock
while true;
do
	if mkdir $LOCKFILE; then
		break;
	else
		sleep 1;
	fi
done

get_oa_boardtype(){
	return `cat /etc/gpio_states  | grep OABOARDTYPE | awk -F= '{print $2}'`
}

make_unpack_dir(){
	
	mkdir -p $UNPACK_DIR
	if [ $? -ne 0 ]; then
		logger "Unable to create directory for unpacking Smart Components."
		return 1
	fi
	return 0
	
}

get_installer_dir() {
	INSTALL_DIR=
	if [ "z$2" = "z" ];then
		INSTALLER=`head -n 50 $1 | grep -e "flash_ilo" -e "oaupgrade"`
	else
		INSTALLER=`head -n 50 $1 | grep -i -e "$2"`
	fi
	dbg_echo $1 INSTALLER=$INSTALLER
	if [ $? -eq 0 ]; then
		INSTALL_DIR=`echo $INSTALLER | cut -d= -f2`
		if [ -d $INSTALL_DIR ]; then
			rm -rf $INSTALL_DIR
		fi
	fi
}

unpack() {
	
	local rc=0
	ln -s $1 $2.scexe
	if [ $? -eq 0 ]; then
		dbg_echo ">>>>>>>>>>Unpacking $2:"
		sh $2.scexe --unpack=$2  
		rc=$?
		rm $2.scexe
		if [ $rc -eq 0 ]; then
			dbg_echo "Successfully unpacked $2"
			return $rc
		else
			dbg_echo ">>>> Failed to unpack $2.scexe"
			return $rc
		fi
	fi
	
	
}


unpack_files() {

while read SCEXE_FILE
do
	if [ $OA_BT -eq $WARHAWK -o $OA_BT -eq $COLOSSUS ]; then
		echo $UPGRADE_TYPE | grep -i ilo
		if [ $? -eq 0 ]; then 
			get_installer_dir $SCEXE_FILE flash_$UPGRADE_TYPE
		else 
			get_installer_dir $SCEXE_FILE $UPGRADE_TYPE
		fi
	else 
		get_installer_dir $SCEXE_FILE 
	fi
	if [ $INSTALL_DIR ]; then
		unpack $SCEXE_FILE $INSTALL_DIR
		if [ $? -ne 0 ]; then
			return 1
		fi	
	fi
done <<EOF
$( find $SCEXE_DIR -name "*.scexe" )
EOF

return 0
}

exit_timeout() {
	WAITING=$( find /sys/fs/fuse/connections -name waiting )
	NWAIT=$( cat $WAITING )
	dbg_echo "Alarm signal received NWAIT=$NWAIT $WAITING"
	if [ $NWAIT -gt 0 ]; then
		ABORT=$( find /sys/fs/fuse/connections -name abort )
		dbg_echo "NWAIT=$NWAIT UNPACKPID=$UNPACKPID $ABORT"
		echo clearme > $ABORT
		kill $UNPACKPID >/dev/null 2>&1
	fi
}

unpack_process(){

	local try=0
	
	while [ $try -lt $MAXTRY ] 
	do
		let try=$try+1
		
		dbg_echo " Attempt #$try "
	
		make_unpack_dir

		if [ $? -ne 0 ]; then
		 	return 1
		fi

		chdir $UNPACK_DIR

		PARENTPID=$$
		unpack_files &
		UNPACKPID=$!
		trap exit_timeout SIGALRM
		(sleep $ALARMTIME; kill -ALRM $PARENTPID) &
		ALARMPID=$!

		dbg_echo "Waiting for unpack_files $UNPACKPID"
		wait $UNPACKPID
		UNPACKRC=$?
		dbg_echo "Unpacked unpack_files finished."

		dbg_echo "Cleanup alarm process"
		kill $ALARMPID >/dev/null 2>&1

		if [ $UNPACKRC -ne 0 ]; then

			dbg_echo "Unmounting FWDVD ISO"
			umount-firmware-mgmt
			if [ $? -ne 0 ]; then
				dbg_echo ">>>> umount-firmware-mgmt failed in unpack <<<<"
				return 1
			fi
			
			dbg_echo "Mounting FWDVD ISO"
			mount-firmware-mgmt >/dev/null 2>&1
			if [ $? -ne 0 ]; then
				dbg_echo "FWDVD ISO has not been mounted"
				return 1
			fi
			
		else 
			return 0
		fi

	done
	return 1
}

get_oa_boardtype
OA_BT=$?

rc=0

if [ -d $UNPACK_DIR ]; then
	dbg_echo " unpack directory already exists "
	rm -rf $LOCKFILE
	exit 2
else
	if [ ! -d $SCEXE_DIR ]; then
		dbg_echo "Mounting FWDVD ISO"
		mount-firmware-mgmt >/dev/null 2>&1
	fi
	if [ $? -ne 0 ]; then
		dbg_echo "FWDVD ISO has not been mounted"
		rm -rf $LOCKFILE
		exit 1
	fi
	unpack_process	
	rc=$?
	if [ $rc -ne 0 ]; then
		dbg_echo " unpack-scexe failed "
		rm -rf $UNPACK_DIR
	else 
		dbg_echo " unpack-scexe completed successfully "	
	fi
	rm -rf $LOCKFILE
	exit $rc
	
fi








