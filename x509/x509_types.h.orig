typedef unsigned char   undefined;

typedef unsigned char    byte;
typedef unsigned int    dword;
typedef long long    longlong;
typedef unsigned char    uchar;
typedef unsigned int    uint;
typedef unsigned long    ulong;
typedef unsigned long long    ulonglong;
typedef unsigned char    undefined1;
typedef unsigned short    undefined2;
typedef unsigned int    undefined4;
typedef unsigned short    ushort;
typedef unsigned short    word;
#define unkbyte9   unsigned long long
#define unkbyte10   unsigned long long
#define unkbyte11   unsigned long long
#define unkbyte12   unsigned long long
#define unkbyte13   unsigned long long
#define unkbyte14   unsigned long long
#define unkbyte15   unsigned long long
#define unkbyte16   unsigned long long

#define unkuint9   unsigned long long
#define unkuint10   unsigned long long
#define unkuint11   unsigned long long
#define unkuint12   unsigned long long
#define unkuint13   unsigned long long
#define unkuint14   unsigned long long
#define unkuint15   unsigned long long
#define unkuint16   unsigned long long

#define unkint9   long long
#define unkint10   long long
#define unkint11   long long
#define unkint12   long long
#define unkint13   long long
#define unkint14   long long
#define unkint15   long long
#define unkint16   long long

#define unkfloat1   float
#define unkfloat2   float
#define unkfloat3   float
#define unkfloat5   double
#define unkfloat6   double
#define unkfloat7   double
#define unkfloat9   long double
#define unkfloat11   long double
#define unkfloat12   long double
#define unkfloat13   long double
#define unkfloat14   long double
#define unkfloat15   long double
#define unkfloat16   long double

#define BADSPACEBASE   void
#define code   void

typedef void _IO_lock_t;

typedef struct _IO_marker _IO_marker, *P_IO_marker;

typedef struct _IO_FILE _IO_FILE, *P_IO_FILE;

typedef long __off_t;

typedef longlong __quad_t;

typedef __quad_t __off64_t;

typedef ulong size_t;

struct _IO_FILE {
    int _flags;
    char *_IO_read_ptr;
    char *_IO_read_end;
    char *_IO_read_base;
    char *_IO_write_base;
    char *_IO_write_ptr;
    char *_IO_write_end;
    char *_IO_buf_base;
    char *_IO_buf_end;
    char *_IO_save_base;
    char *_IO_backup_base;
    char *_IO_save_end;
    struct _IO_marker *_markers;
    struct _IO_FILE *_chain;
    int _fileno;
    int _flags2;
    __off_t _old_offset;
    ushort _cur_column;
    char _vtable_offset;
    char _shortbuf[1];
    _IO_lock_t *_lock;
    __off64_t _offset;
    void *__pad1;
    void *__pad2;
    void *__pad3;
    void *__pad4;
    size_t __pad5;
    int _mode;
    char _unused2[40];
};

struct _IO_marker {
    struct _IO_marker *_next;
    struct _IO_FILE *_sbuf;
    int _pos;
};

typedef struct ASIdentifierChoice_st ASIdentifierChoice_st, *PASIdentifierChoice_st;

typedef struct ASIdentifierChoice_st ASIdentifierChoice;

typedef union _union_933 _union_933, *P_union_933;

typedef int ASN1_NULL;

typedef struct stack_st_ASIdOrRange stack_st_ASIdOrRange, *Pstack_st_ASIdOrRange;

typedef struct stack_st_ASIdOrRange ASIdOrRanges;

typedef struct stack_st stack_st, *Pstack_st;

typedef struct stack_st _STACK;

ASN1_ENCunion _union_933 {
    ASN1_NULL *inherit;
    ASIdOrRanges *asIdsOrRanges;
};

    int num;
    char **data;
    int sorted;
    int num_alloc;
    int (*comp)(void *, void *);
};

struct stack_st_ASIdOrRange {
    _STACK stack;
};

struct ASIdentifierChoice_st {
    int type;
    union _union_933 u;
};

typedef struct stack_st_GENERAL_SUBTREE stack_st_GENERAL_SUBTREE, *Pstack_st_GENERAL_SUBTREE;

struct stack_st_GENERAL_SUBTREE {
    _STACK stack;
};

typedef struct stack_st_GENERAL_NAME stack_st_GENERAL_NAME, *Pstack_st_GENERAL_NAME;

typedef struct stack_st_GENERAL_NAME GENERAL_NAMES;

struct stack_st_GENERAL_NAME {
    _STACK stack;
};

typedef struct x509_cinf_st x509_cinf_st, *Px509_cinf_st;

typedef struct asn1_string_st asn1_string_st, *Pasn1_string_st;

typedef struct asn1_string_st ASN1_INTEGER;

typedef struct X509_algor_st X509_algor_st, *PX509_algor_st;

typedef struct X509_algor_st X509_ALGOR;

typedef struct X509_name_st X509_name_st, *PX509_name_st;

typedef struct X509_name_st X509_NAME;

typedef struct X509_val_st X509_val_st, *PX509_val_st;

typedef struct X509_val_st X509_VAL;

typedef struct X509_pubkey_st X509_pubkey_st, *PX509_pubkey_st;

typedef struct X509_pubkey_st X509_PUBKEY;

typedef struct asn1_string_st ASN1_BIT_STRING;

typedef struct stack_st_X509_EXTENSION stack_st_X509_EXTENSION, *Pstack_st_X509_EXTENSION;

typedef struct ASN1_ENCODING_st ASN1_ENCODING_st, *PASN1_ENCODING_st;

typedef struct ASN1_ENCODING_st ASN1_ENCODING;

typedef struct asn1_object_st asn1_object_st, *Pasn1_object_st;

typedef struct asn1_object_st ASN1_OBJECT;

typedef struct asn1_type_st asn1_type_st, *Pasn1_type_st;

typedef struct asn1_type_st ASN1_TYPE;

typedef struct stack_st_X509_NAME_ENTRY stack_st_X509_NAME_ENTRY, *Pstack_st_X509_NAME_ENTRY;

typedef struct buf_mem_st buf_mem_st, *Pbuf_mem_st;

typedef struct buf_mem_st BUF_MEM;

typedef struct asn1_string_st ASN1_TIME;

typedef struct evp_pkey_st evp_pkey_st, *Pevp_pkey_st;

typedef struct evp_pkey_st EVP_PKEY;

typedef union _union_263 _union_263, *P_union_263;

typedef struct evp_pkey_asn1_method_st evp_pkey_asn1_method_st, *Pevp_pkey_asn1_method_st;

typedef struct evp_pkey_asn1_method_st EVP_PKEY_ASN1_METHOD;

typedef struct engine_st engine_st, *Pengine_st;

typedef struct engine_st ENGINE;

typedef union _union_277 _union_277, *P_union_277;

typedef struct stack_st_X509_ATTRIBUTE stack_st_X509_ATTRIBUTE, *Pstack_st_X509_ATTRIBUTE;

typedef int ASN1_BOOLEAN;

typedef struct asn1_string_st ASN1_STRING;

typedef struct asn1_string_st ASN1_ENUMERATED;

typedef struct asn1_string_st ASN1_OCTET_STRING;

typedef struct asn1_string_st ASN1_PRINTABLESTRING;

typedef struct asn1_string_st ASN1_T61STRING;

typedef struct asn1_string_st ASN1_IA5STRING;

typedef struct asn1_string_st ASN1_GENERALSTRING;

typedef struct asn1_string_st ASN1_BMPSTRING;

typedef struct asn1_string_st ASN1_UNIVERSALSTRING;

typedef struct asn1_string_st ASN1_UTCTIME;

typedef struct asn1_string_st ASN1_GENERALIZEDTIME;

typedef struct asn1_string_st ASN1_VISIBLESTRING;

typedef struct asn1_string_st ASN1_UTF8STRING;

typedef struct ASN1_VALUE_st ASN1_VALUE_st, *PASN1_VALUE_st;

typedef struct ASN1_VALUE_st ASN1_VALUE;

typedef struct rsa_st rsa_st, *Prsa_st;

typedef struct dsa_st dsa_st, *Pdsa_st;

typedef struct dh_st dh_st, *Pdh_st;

typedef struct ec_key_st ec_key_st, *Pec_key_st;

typedef struct rsa_meth_st rsa_meth_st, *Prsa_meth_st;

typedef struct rsa_st RSA;

typedef struct bignum_st bignum_st, *Pbignum_st;

typedef struct bignum_st BIGNUM;

typedef struct bignum_ctx bignum_ctx, *Pbignum_ctx;

typedef struct bignum_ctx BN_CTX;

typedef struct bn_mont_ctx_st bn_mont_ctx_st, *Pbn_mont_ctx_st;

typedef struct bn_mont_ctx_st BN_MONT_CTX;

typedef struct bn_gencb_st bn_gencb_st, *Pbn_gencb_st;

typedef struct bn_gencb_st BN_GENCB;

typedef struct rsa_meth_st RSA_METHOD;

typedef struct crypto_ex_data_st crypto_ex_data_st, *Pcrypto_ex_data_st;

typedef struct crypto_ex_data_st CRYPTO_EX_DATA;

typedef struct bn_blinding_st bn_blinding_st, *Pbn_blinding_st;

typedef struct bn_blinding_st BN_BLINDING;

typedef struct dsa_method dsa_method, *Pdsa_method;

typedef struct DSA_SIG_st DSA_SIG_st, *PDSA_SIG_st;

typedef struct DSA_SIG_st DSA_SIG;

typedef struct dsa_st DSA;

typedef struct dsa_method DSA_METHOD;

typedef struct dh_method dh_method, *Pdh_method;

typedef struct dh_st DH;

typedef struct dh_method DH_METHOD;

typedef union _union_181 _union_181, *P_union_181;

typedef struct stack_st_void stack_st_void, *Pstack_st_void;

union _union_181 {
    void (*cb_1)(int, int, void *);
    int (*cb_2)(int, int, BN_GENCB *);
};

struct bn_gencb_st {
    uint ver;
    void *arg;
    union _union_181 cb;
};

struct crypto_ex_data_st {
    struct stack_st_void *sk;
    int dummy;
};

struct ASN1_ENCODING_st {
    uchar *enc;
    long len;
    int modified;
};

struct x509_cinf_st {
    ASN1_INTEGER *version;
    ASN1_INTEGER *serialNumber;
    X509_ALGOR *signature;
    X509_NAME *issuer;
    X509_VAL *validity;
    X509_NAME *subject;
    X509_PUBKEY *key;
    ASN1_BIT_STRING *issuerUID;
    ASN1_BIT_STRING *subjectUID;
    struct stack_st_X509_EXTENSION *extensions;
    ASN1_ENCODING enc;
};

struct rsa_st {
    int pad;
    long version;
    RSA_METHOD *meth;
    ENGINE *engine;
    BIGNUM *n;
    BIGNUM *e;
    BIGNUM *d;
    BIGNUM *p;
    BIGNUM *q;
    BIGNUM *dmp1;
    BIGNUM *dmq1;
    BIGNUM *iqmp;
    CRYPTO_EX_DATA ex_data;
    int references;
    int flags;
    BN_MONT_CTX *_method_mod_n;
    BN_MONT_CTX *_method_mod_p;
    BN_MONT_CTX *_method_mod_q;
    char *bignum_data;
    BN_BLINDING *blinding;
    BN_BLINDING *mt_blinding;
};

struct evp_pkey_asn1_method_st {
};

struct dh_st {
    int pad;
    int version;
    BIGNUM *p;
    BIGNUM *g;
    long length;
    BIGNUM *pub_key;
    BIGNUM *priv_key;
    int flags;
    BN_MONT_CTX *method_mont_p;
    BIGNUM *q;
    BIGNUM *j;
    uchar *seed;
    int seedlen;
    BIGNUM *counter;
    int references;
    CRYPTO_EX_DATA ex_data;
    DH_METHOD *meth;
    ENGINE *engine;
};

struct X509_pubkey_st {
    X509_ALGOR *algor;
    ASN1_BIT_STRING *public_key;
    EVP_PKEY *pkey;
};

struct bn_blinding_st {
};

union _union_263 {
    char *ptr;
    ASN1_BOOLEAN boolean;
    ASN1_STRING *asn1_string;
    ASN1_OBJECT *object;
    ASN1_INTEGER *integer;
    ASN1_ENUMERATED *enumerated;
    ASN1_BIT_STRING *bit_string;
    ASN1_OCTET_STRING *octet_string;
    ASN1_PRINTABLESTRING *printablestring;
    ASN1_T61STRING *t61string;
    ASN1_IA5STRING *ia5string;
    ASN1_GENERALSTRING *generalstring;
    ASN1_BMPSTRING *bmpstring;
    ASN1_UNIVERSALSTRING *universalstring;
    ASN1_UTCTIME *utctime;
    ASN1_GENERALIZEDTIME *generalizedtime;
    ASN1_VISIBLESTRING *visiblestring;
    ASN1_UTF8STRING *utf8string;
    ASN1_STRING *set;
    ASN1_STRING *sequence;
    ASN1_VALUE *asn1_value;
};

struct asn1_type_st {
    int type;
    union _union_263 value;
};

struct dh_method {
    char *name;
    int (*generate_key)(DH *);
    int (*compute_key)(uchar *, BIGNUM *, DH *);
    int (*bn_mod_exp)(DH *, BIGNUM *, BIGNUM *, BIGNUM *, BIGNUM *, BN_CTX *, BN_MONT_CTX *);
    int (*init)(DH *);
    int (*finish)(DH *);
    int flags;
    char *app_data;
    int (*generate_params)(DH *, int, int, BN_GENCB *);
};

struct buf_mem_st {
    size_t length;
    char *data;
    size_t max;
};

struct stack_st_X509_ATTRIBUTE {
    _STACK stack;
};

struct stack_st_void {
    _STACK stack;
};

struct ec_key_st {
};

struct ASN1_VALUE_st {
};

struct X509_name_st {
    struct stack_st_X509_NAME_ENTRY *entries;
    int modified;
    BUF_MEM *bytes;
    uchar *canon_enc;
    int canon_enclen;
};

struct X509_algor_st {
    ASN1_OBJECT *algorithm;
    ASN1_TYPE *parameter;
};

struct X509_val_st {
    ASN1_TIME *notBefore;
    ASN1_TIME *notAfter;
};

struct bignum_ctx {
};

struct dsa_st {
    int pad;
    long version;
    int write_params;
    BIGNUM *p;
    BIGNUM *q;
    BIGNUM *g;
    BIGNUM *pub_key;
    BIGNUM *priv_key;
    BIGNUM *kinv;
    BIGNUM *r;
    int flags;
    BN_MONT_CTX *method_mont_p;
    int references;
    CRYPTO_EX_DATA ex_data;
    DSA_METHOD *meth;
    ENGINE *engine;
};

struct stack_st_X509_EXTENSION {
    _STACK stack;
};

struct DSA_SIG_st {
    BIGNUM *r;
    BIGNUM *s;
};

struct asn1_object_st {
    char *sn;
    char **ln;
    int nid;
    int length;
    uchar *data;
    int flags;
};

struct bignum_st {
    ulong *d;
    int top;
    int dmax;
    int neg;
    int flags;
};

struct rsa_meth_st {
    char *name;
    int (*rsa_pub_enc)(int, uchar *, uchar *, RSA *, int);
    int (*rsa_pub_dec)(int, uchar *, uchar *, RSA *, int);
    int (*rsa_priv_enc)(int, uchar *, uchar *, RSA *, int);
    int (*rsa_priv_dec)(int, uchar *, uchar *, RSA *, int);
    int (*rsa_mod_exp)(BIGNUM *, BIGNUM *, RSA *, BN_CTX *);
    int (*bn_mod_exp)(BIGNUM *, BIGNUM *, BIGNUM *, BIGNUM *, BN_CTX *, BN_MONT_CTX *);
    int (*init)(RSA *);
    int (*finish)(RSA *);
    int flags;
    char *app_data;
    int (*rsa_sign)(int, uchar *, uint, uchar *, uint *, RSA *);
    int (*rsa_verify)(int, uchar *, uint, uchar *, uint, RSA *);
    int (*rsa_keygen)(RSA *, int, BIGNUM *, BN_GENCB *);
};

struct engine_st {
};

union _union_277 {
    char *ptr;
    struct rsa_st *rsa;
    struct dsa_st *dsa;
    struct dh_st *dh;
    struct ec_key_st *ec;
};

struct stack_st_X509_NAME_ENTRY {
    _STACK stack;
};

struct dsa_method {
    char *name;
    DSA_SIG * (*dsa_do_sign)(uchar *, int, DSA *);
    int (*dsa_sign_setup)(DSA *, BN_CTX *, BIGNUM **, BIGNUM **);
    int (*dsa_do_verify)(uchar *, int, DSA_SIG *, DSA *);
    int (*dsa_mod_exp)(DSA *, BIGNUM *, BIGNUM *, BIGNUM *, BIGNUM *, BIGNUM *, BIGNUM *, BN_CTX *, BN_MONT_CTX *);
    int (*bn_mod_exp)(DSA *, BIGNUM *, BIGNUM *, BIGNUM *, BIGNUM *, BN_CTX *, BN_MONT_CTX *);
    int (*init)(DSA *);
    int (*finish)(DSA *);
    int flags;
    char *app_data;
    int (*dsa_paramgen)(DSA *, int, uchar *, int, int *, ulong *, BN_GENCB *);
    int (*dsa_keygen)(DSA *);
};

struct asn1_string_st {
    int length;
    int type;
    uchar *data;
    long flags;
};

struct evp_pkey_st {
    int type;
    int save_type;
    int references;
    EVP_PKEY_ASN1_METHOD *ameth;
    ENGINE *engine;
    union _union_277 pkey;
    int save_parameters;
    struct stack_st_X509_ATTRIBUTE *attributes;
};

struct bn_mont_ctx_st {
    int ri;
    BIGNUM RR;
    BIGNUM N;
    BIGNUM Ni;
    ulong n0[2];
    int flags;
};

typedef struct x509_cert_aux_st x509_cert_aux_st, *Px509_cert_aux_st;

typedef struct x509_cert_aux_st X509_CERT_AUX;

typedef struct stack_st_ASN1_OBJECT stack_st_ASN1_OBJECT, *Pstack_st_ASN1_OBJECT;

typedef struct stack_st_X509_ALGOR stack_st_X509_ALGOR, *Pstack_st_X509_ALGOR;

struct stack_st_X509_ALGOR {
    _STACK stack;
};

struct stack_st_ASN1_OBJECT {
    _STACK stack;
};

struct x509_cert_aux_st {
    struct stack_st_ASN1_OBJECT *trust;
    struct stack_st_ASN1_OBJECT *reject;
    ASN1_UTF8STRING *alias;
    ASN1_OCTET_STRING *keyid;
    struct stack_st_X509_ALGOR *other;
};

typedef struct x509_cinf_st X509_CINF;

typedef struct ASIdentifiers_st ASIdentifiers_st, *PASIdentifiers_st;

struct ASIdentifiers_st {
    ASIdentifierChoice *asnum;
    ASIdentifierChoice **rdi;
};

typedef struct stack_st_DIST_POINT stack_st_DIST_POINT, *Pstack_st_DIST_POINT;

struct stack_st_DIST_POINT {
    _STACK stack;
};

typedef struct stack_st_IPAddressFamily stack_st_IPAddressFamily, *Pstack_st_IPAddressFamily;

struct stack_st_IPAddressFamily {
    _STACK stack;
};

typedef int (pem_password_cb)(char *, int, int, void *);

typedef struct bio_st bio_st, *Pbio_st;

typedef struct bio_method_st bio_method_st, *Pbio_method_st;

typedef struct bio_st BIO;

typedef void (bio_info_cb)(struct bio_st *, int, char *, int, long, long);

typedef struct bio_method_st BIO_METHOD;

struct bio_st {
    BIO_METHOD *method;
    long (*callback)(struct bio_st *, int, char *, int, long, long);
    char *cb_arg;
    int init;
    int shutdown;
    int flags;
    int retry_reason;
    int num;
    void *ptr;
    struct bio_st *next_bio;
    struct bio_st *prev_bio;
    int references;
    ulong num_read;
    ulong num_write;
    CRYPTO_EX_DATA ex_data;
};

struct bio_method_st {
    int type;
    char *name;
    int (*bwrite)(BIO *, char *, int);
    int (*bread)(BIO *, char *, int);
    int (*bputs)(BIO *, char *);
    int (*bgets)(BIO *, char *, int);
    long (*ctrl)(BIO *, int, long, void *);
    int (*create)(BIO *);
    int (*destroy)(BIO *);
    long (*callback_ctrl)(BIO *, int, bio_info_cb *);
};

typedef struct _IO_FILE FILE;

typedef int __ssize_t;

typedef __ssize_t ssize_t;

typedef int __pid_t;

typedef long __time_t;

typedef uint __mode_t;

typedef ulong __ino_t;

typedef struct x509_st x509_st, *Px509_st;

typedef struct x509_st X509;

typedef struct AUTHORITY_KEYID_st AUTHORITY_KEYID_st, *PAUTHORITY_KEYID_st;

typedef struct AUTHORITY_KEYID_st AUTHORITY_KEYID;

typedef struct X509_POLICY_CACHE_st X509_POLICY_CACHE_st, *PX509_POLICY_CACHE_st;

typedef struct X509_POLICY_CACHE_st X509_POLICY_CACHE;

typedef struct NAME_CONSTRAINTS_st NAME_CONSTRAINTS_st, *PNAME_CONSTRAINTS_st;

typedef struct NAME_CONSTRAINTS_st NAME_CONSTRAINTS;

struct AUTHORITY_KEYID_st {
    ASN1_OCTET_STRING *keyid;
    GENERAL_NAMES *issuer;
    ASN1_INTEGER *serial;
};

struct NAME_CONSTRAINTS_st {
    struct stack_st_GENERAL_SUBTREE *permittedSubtrees;
    struct stack_st_GENERAL_SUBTREE *excludedSubtrees;
};

struct x509_st {
    X509_CINF *cert_info;
    X509_ALGOR *sig_alg;
    ASN1_BIT_STRING *signature;
    int valid;
    int references;
    char *name;
    CRYPTO_EX_DATA ex_data;
    long ex_pathlen;
    long ex_pcpathlen;
    ulong ex_flags;
    ulong ex_kusage;
    ulong ex_xkusage;
    ulong ex_nscert;
    ASN1_OCTET_STRING *skid;
    AUTHORITY_KEYID *akid;
    X509_POLICY_CACHE *policy_cache;
    struct stack_st_DIST_POINT *crldp;
    struct stack_st_GENERAL_NAME *altname;
    NAME_CONSTRAINTS *nc;
    struct stack_st_IPAddressFamily *rfc3779_addr;
    struct ASIdentifiers_st *rfc3779_asid;
    uchar sha1_hash[20];
    X509_CERT_AUX *aux;
};

struct X509_POLICY_CACHE_st {
};

typedef struct env_md_st env_md_st, *Penv_md_st;

typedef struct env_md_ctx_st env_md_ctx_st, *Penv_md_ctx_st;

typedef struct env_md_ctx_st EVP_MD_CTX;

typedef struct env_md_st EVP_MD;

typedef struct evp_pkey_ctx_st evp_pkey_ctx_st, *Pevp_pkey_ctx_st;

typedef struct evp_pkey_ctx_st EVP_PKEY_CTX;

struct env_md_ctx_st {
    EVP_MD *digest;
    ENGINE *engine;
    ulong flags;
    void *md_data;
    EVP_PKEY_CTX *pctx;
    int (*update)(EVP_MD_CTX *, void *, size_t);
};

struct evp_pkey_ctx_st {
};

struct env_md_st {
    int type;
    int pkey_type;
    int md_size;
    ulong flags;
    int (*init)(EVP_MD_CTX *);
    int (*update)(EVP_MD_CTX *, void *, size_t);
    int (*final)(EVP_MD_CTX *, uchar *);
    int (*copy)(EVP_MD_CTX *, EVP_MD_CTX *);
    int (*cleanup)(EVP_MD_CTX *);
    int (*sign)(int, uchar *, uint, uchar *, uint *, void *);
    int (*verify)(int, uchar *, uint, uchar *, uint, void *);
    int required_pkey_type[5];
    int block_size;
    int ctx_size;
    int (*md_ctrl)(EVP_MD_CTX *, int, int, void *);
};

typedef struct __dirstream __dirstream, *P__dirstream;

typedef struct __dirstream DIR;

struct __dirstream {
};

typedef struct dirent dirent, *Pdirent;

struct dirent {
    __ino_t d_ino;
    __off_t d_off;
    ushort d_reclen;
    uchar d_type;
    char d_name[256];
};

typedef struct SHA256state_st SHA256state_st, *PSHA256state_st;

typedef struct SHA256state_st SHA256_CTX;

struct SHA256state_st {
    uint h[8];
    uint Nl;
    uint Nh;
    uint data[16];
    uint num;
    uint md_len;
};

typedef struct SHA512state_st SHA512state_st, *PSHA512state_st;

typedef union _union_320 _union_320, *P_union_320;

union _union_320 {
    ulonglong d[16];
    uchar p[128];
};

struct SHA512state_st {
    ulonglong h[8];
    ulonglong Nl;
    ulonglong Nh;
    union _union_320 u;
    uint num;
    uint md_len;
};

typedef struct SHA512state_st SHA512_CTX;

typedef void *__gnuc_va_list;

typedef __time_t time_t;

typedef struct Elf32_Shdr Elf32_Shdr, *PElf32_Shdr;

typedef enum Elf_SectionHeaderType_PPC {
    SHT_NULL=0,
    SHT_PROGBITS=1,
    SHT_SYMTAB=2,
    SHT_STRTAB=3,
    SHT_RELA=4,
    SHT_HASH=5,
    SHT_DYNAMIC=6,
    SHT_NOTE=7,
    SHT_NOBITS=8,
    SHT_REL=9,
    SHT_SHLIB=10,
    SHT_DYNSYM=11,
    SHT_INIT_ARRAY=14,
    SHT_FINI_ARRAY=15,
    SHT_PREINIT_ARRAY=16,
    SHT_GROUP=17,
    SHT_SYMTAB_SHNDX=18,
    SHT_ANDROID_REL=1610612737,
    SHT_ANDROID_RELA=1610612738,
    SHT_GNU_ATTRIBUTES=1879048181,
    SHT_GNU_HASH=1879048182,
    SHT_GNU_LIBLIST=1879048183,
    SHT_CHECKSUM=1879048184,
    SHT_SUNW_move=1879048186,
    SHT_SUNW_COMDAT=1879048187,
    SHT_SUNW_syminfo=1879048188,
    SHT_GNU_verdef=1879048189,
    SHT_GNU_verneed=1879048190,
    SHT_GNU_versym=1879048191
} Elf_SectionHeaderType_PPC;

struct Elf32_Shdr {
    dword sh_name;
    enum Elf_SectionHeaderType_PPC sh_type;
    dword sh_flags;
    dword sh_addr;
    dword sh_offset;
    dword sh_size;
    dword sh_link;
    dword sh_info;
    dword sh_addralign;
    dword sh_entsize;
};

typedef struct Elf32_Phdr Elf32_Phdr, *PElf32_Phdr;

typedef enum Elf_ProgramHeaderType_PPC {
    PT_NULL=0,
    PT_LOAD=1,
    PT_DYNAMIC=2,
    PT_INTERP=3,
    PT_NOTE=4,
    PT_SHLIB=5,
    PT_PHDR=6,
    PT_TLS=7,
    PT_GNU_EH_FRAME=1685382480,
    PT_GNU_STACK=1685382481,
    PT_GNU_RELRO=1685382482
} Elf_ProgramHeaderType_PPC;

struct Elf32_Phdr {
    enum Elf_ProgramHeaderType_PPC p_type;
    dword p_offset;
    dword p_vaddr;
    dword p_paddr;
    dword p_filesz;
    dword p_memsz;
    dword p_flags;
    dword p_align;
};

typedef struct Elf32_Sym Elf32_Sym, *PElf32_Sym;

struct Elf32_Sym {
    dword st_name;
    dword st_value;
    dword st_size;
    byte st_info;
    byte st_other;
    word st_shndx;
};

typedef struct Elf32_Rela Elf32_Rela, *PElf32_Rela;

struct Elf32_Rela {
    dword r_offset; // location to apply the relocation action
    dword r_info; // the symbol table index and the type of relocation
    dword r_addend; // a constant addend used to compute the relocatable field value
};

typedef struct Elf32_Dyn_PPC Elf32_Dyn_PPC, *PElf32_Dyn_PPC;

typedef enum Elf32_DynTag_PPC {
    DT_NULL=0,
    DT_NEEDED=1,
    DT_PLTRELSZ=2,
    DT_PLTGOT=3,
    DT_HASH=4,
    DT_STRTAB=5,
    DT_SYMTAB=6,
    DT_RELA=7,
    DT_RELASZ=8,
    DT_RELAENT=9,
    DT_STRSZ=10,
    DT_SYMENT=11,
    DT_INIT=12,
    DT_FINI=13,
    DT_SONAME=14,
    DT_RPATH=15,
    DT_SYMBOLIC=16,
    DT_REL=17,
    DT_RELSZ=18,
    DT_RELENT=19,
    DT_PLTREL=20,
    DT_DEBUG=21,
    DT_TEXTREL=22,
    DT_JMPREL=23,
    DT_BIND_NOW=24,
    DT_INIT_ARRAY=25,
    DT_FINI_ARRAY=26,
    DT_INIT_ARRAYSZ=27,
    DT_FINI_ARRAYSZ=28,
    DT_RUNPATH=29,
    DT_FLAGS=30,
    DT_PREINIT_ARRAY=32,
    DT_PREINIT_ARRAYSZ=33,
    DT_RELRSZ=35,
    DT_RELR=36,
    DT_RELRENT=37,
    DT_ANDROID_REL=1610612751,
    DT_ANDROID_RELSZ=1610612752,
    DT_ANDROID_RELA=1610612753,
    DT_ANDROID_RELASZ=1610612754,
    DT_ANDROID_RELR=1879040000,
    DT_ANDROID_RELRSZ=1879040001,
    DT_ANDROID_RELRENT=1879040003,
    DT_GNU_PRELINKED=1879047669,
    DT_GNU_CONFLICTSZ=1879047670,
    DT_GNU_LIBLISTSZ=1879047671,
    DT_CHECKSUM=1879047672,
    DT_PLTPADSZ=1879047673,
    DT_MOVEENT=1879047674,
    DT_MOVESZ=1879047675,
    DT_FEATURE_1=1879047676,
    DT_POSFLAG_1=1879047677,
    DT_SYMINSZ=1879047678,
    DT_SYMINENT=1879047679,
    DT_GNU_XHASH=1879047924,
    DT_GNU_HASH=1879047925,
    DT_TLSDESC_PLT=1879047926,
    DT_TLSDESC_GOT=1879047927,
    DT_GNU_CONFLICT=1879047928,
    DT_GNU_LIBLIST=1879047929,
    DT_CONFIG=1879047930,
    DT_DEPAUDIT=1879047931,
    DT_AUDIT=1879047932,
    DT_PLTPAD=1879047933,
    DT_MOVETAB=1879047934,
    DT_SYMINFO=1879047935,
    DT_VERSYM=1879048176,
    DT_RELACOUNT=1879048185,
    DT_RELCOUNT=1879048186,
    DT_FLAGS_1=1879048187,
    DT_VERDEF=1879048188,
    DT_VERDEFNUM=1879048189,
    DT_VERNEED=1879048190,
    DT_VERNEEDNUM=1879048191,
    DT_PPC_GOT=1879048192,
    DT_PPC_OPT=1879048193,
    DT_AUXILIARY=2147483645,
    DT_FILTER=2147483647
} Elf32_DynTag_PPC;

struct Elf32_Dyn_PPC {
    enum Elf32_DynTag_PPC d_tag;
    dword d_val;
};

typedef struct Elf32_Ehdr Elf32_Ehdr, *PElf32_Ehdr;

struct Elf32_Ehdr {
    byte e_ident_magic_num;
    char e_ident_magic_str[3];
    byte e_ident_class;
    byte e_ident_data;
    byte e_ident_version;
    byte e_ident_osabi;
    byte e_ident_abiversion;
    byte e_ident_pad[7];
    word e_type;
    word e_machine;
    dword e_version;
    dword e_entry;
    dword e_phoff;
    dword e_shoff;
    dword e_flags;
    word e_ehsize;
    word e_phentsize;
    word e_phnum;
    word e_shentsize;
    word e_shnum;
    word e_shstrndx;
};




int _init(EVP_PKEY_CTX *ctx);
void entry(void);
void FUN_100028c8(void);
void FUN_10002954(void);
void FUN_10002974(void);
void FUN_100029cc(void);
void FUN_100029e8(int param_1,char *param_2,undefined4 param_3,undefined4 param_4,undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8);
undefined4 FUN_10002a9c(int param_1,char *param_2,int param_3,int param_4,int param_5);
int FUN_10002dd0(char *param_1,size_t param_2,void *param_3);
undefined4 FUN_10002f44(char *param_1,void *param_2,size_t param_3);
undefined4 FUN_100030bc(void);
byte FUN_10003104(void);
undefined4 FUN_10003210(int param_1,int param_2);
void FUN_10003304(int param_1,int param_2,char *param_3,char *param_4,undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8);
char * FUN_100033a8(undefined4 param_1);
int FUN_10003440(uint *param_1);
int main(int param_1,char **param_2);
int SHA256_Init(SHA256_CTX *c);
void SHA256_Transform(SHA256_CTX *c,uchar *data);
int SHA256_Update(SHA256_CTX *c,void *data,size_t len);
int SHA256_Final(uchar *md,SHA256_CTX *c);
undefined * FUN_10004b14(SHA256_CTX *param_1,undefined *param_2);
void FUN_10004be8(void *param_1,size_t param_2,undefined4 param_3);
int SHA512_Init(SHA512_CTX *c);
void SHA512_Transform(SHA512_CTX *c,uchar *data);
int SHA512_Update(SHA512_CTX *c,void *data,size_t len);
void FUN_100057b8(SHA512_CTX *param_1);
int SHA512_Final(uchar *md,SHA512_CTX *c);
undefined * FUN_10005920(SHA512_CTX *param_1,undefined *param_2);
void FUN_100059f4(void *param_1,size_t param_2,undefined4 param_3);
int SHA384_Init(SHA512_CTX *c);
int SHA384_Update(SHA512_CTX *c,void *data,size_t len);
int SHA384_Final(uchar *md,SHA512_CTX *c);
undefined * FUN_10005b30(SHA512_CTX *param_1,undefined *param_2);
void FUN_10005c04(void *param_1,size_t param_2,undefined4 param_3);
void FUN_10005c58(byte *param_1,int param_2);
uint FUN_10005cdc(int param_1,uint param_2,SHA256_CTX *param_3);
size_t FUN_10005d64(int param_1,void *param_2,size_t param_3,SHA256_CTX *param_4);
undefined4 FUN_10005de8(int param_1,byte *param_2,uchar *param_3);
byte FUN_10005f64(undefined4 param_1,undefined4 param_2,void *param_3,size_t param_4,int param_5,int param_6);
undefined4 FUN_1000610c(int param_1,__off_t *param_2,int param_3,undefined4 param_4,int param_5);
undefined4 FUN_100061f4(void *param_1,char *param_2,int param_3);
byte * TrimLeft(byte *param_1);
char * TrimRight(char *param_1);
void TrimLeftRight(void);
int FUN_10006450(void);
undefined4 FUN_10006624(char *param_1,char *param_2);
void FUN_1000673c(undefined4 *param_1);
void FUN_100067b4(int param_1,int param_2,uint param_3);
void FUN_10006944(undefined4 param_1,int param_2);
void FUN_10006a20(int *param_1,undefined4 param_2);
void FUN_10007ff0(int param_1,int param_2,uint param_3);
void FUN_10008100(int param_1,int param_2,uint param_3);
void FUN_100081f0(int param_1,int param_2,uint param_3);
void FUN_10008264(int param_1,undefined param_2,uint param_3);
int FUN_100082cc(undefined4 param_1,undefined4 param_2,undefined4 param_3,int param_4,int *param_5,undefined4 param_6);
int FUN_10008474(undefined4 param_1,int *param_2,undefined4 param_3,uint param_4,int *param_5);
undefined4 FUN_10008674(undefined4 param_1,undefined4 param_2,undefined4 param_3,int param_4,int *param_5);
int FUN_100087cc(undefined4 param_1,int *param_2,undefined4 param_3,uint param_4,int *param_5);
undefined4 FUN_100089b8(undefined4 param_1,uint *param_2,undefined4 param_3,undefined4 param_4,int *param_5);
undefined4 FUN_10008b44(undefined4 param_1,uint *param_2,undefined4 param_3,undefined4 param_4,int *param_5);
void FUN_10008f90(void *param_1,int param_2,size_t param_3);
void FUN_10008fe4(void *param_1,void *param_2,size_t param_3);
int FUN_10009038(void *param_1,void *param_2,size_t param_3);
void FUN_100090a4(int param_1,uint param_2,int param_3,int param_4);
void FUN_100091dc(int param_1,int param_2,int param_3,uint param_4);
void FUN_100092f8(int param_1,int param_2,uint param_3);
void FUN_10009374(int param_1,uint param_2);
void FUN_100093dc(int param_1,uint param_2,int param_3);
uint FUN_10009460(int param_1,int param_2,int param_3,uint param_4);
int FUN_10009580(int param_1,int param_2,int param_3,uint param_4);
void FUN_100096ac(undefined4 param_1,int param_2,undefined4 param_3,int param_4);
uint FUN_10009824(int param_1,int param_2,uint param_3,uint param_4);
uint FUN_10009924(int param_1,int param_2,uint param_3,int param_4);
void FUN_10009a24(int param_1,undefined4 param_2,undefined4 param_3,int param_4,int param_5,undefined4 param_6);
void FUN_10009db8(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,undefined4 param_5);
void FUN_10009e2c(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,int param_5);
void FUN_10009ebc(undefined4 param_1,undefined4 param_2,int param_3,undefined4 param_4,undefined4 param_5,undefined4 param_6);
void FUN_1000a128(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void FUN_1000a394(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
undefined4 FUN_1000a4c0(int param_1,int param_2,int param_3);
undefined4 FUN_1000a598(int param_1,uint param_2);
int FUN_1000a61c(int param_1,undefined4 param_2);
int FUN_1000a6bc(int param_1,int param_2);
uint FUN_1000a738(int param_1,int param_2,int param_3,int param_4,uint param_5);
int FUN_1000a8a4(int param_1,int param_2,int param_3,int param_4,uint param_5);
uint FUN_1000aa18(uint param_1);
undefined4 FUN_1000aa84(undefined4 *param_1);
undefined4 FUN_1000ac18(uint *param_1,undefined4 param_2,uint param_3);
undefined4 FUN_1000ad78(undefined4 *param_1,undefined4 *param_2);
undefined4 FUN_1000adb4(int param_1,uint param_2,int *param_3);
void FUN_1000af54(undefined4 param_1);
void FUN_1000af94(uint *param_1,uint param_2,uint param_3);
void FUN_1000b104(int *param_1,int *param_2,uint param_3);
void FUN_1000b460(char *param_1);
undefined4 FUN_1000b510(void);
void FUN_1000b538(char *param_1);
undefined4 FUN_1000b5c8(void);
void FUN_1000b5f0(int param_1);
undefined4 FUN_1000b628(void);
void FUN_1000b650(int param_1);
undefined4 FUN_1000b688(void);
void FUN_1000b6b0(int param_1);
undefined4 FUN_1000b6e8(void);
void FUN_1000b710(int param_1);
undefined4 FUN_1000b748(void);
undefined4 FUN_1000b770(char *param_1);
undefined4 FUN_1000b964(void);
undefined4 FUN_1000b98c(void);
void * FUN_1000b9b4(void);
undefined4 FUN_1000b9f4(char *param_1);
X509 * FUN_1000bac8(void);
void FUN_1000bb88(void);
void FUN_1000bbac(undefined4 param_1);
undefined4 FUN_1000bbd8(void);
undefined4 FUN_1000bc00(char *param_1);
char * FUN_1000bdd4(int param_1);
void FUN_1000be20(undefined4 param_1,char *param_2);
int FUN_1000be80(int param_1);
void FUN_1000bf58(void *param_1,uint param_2,undefined *param_3,int param_4);
void FUN_1000c09c(byte *param_1,int param_2);
int FUN_1000c18c(char *param_1,void *param_2,uint param_3);
int FUN_1000c384(byte param_1);
int FUN_1000c488(int param_1,int param_2);
undefined4 FUN_1000c6f4(size_t param_1,int *param_2,int param_3);
undefined4 FUN_1000c7dc(int *param_1,int param_2);
void FUN_1000c868(int param_1,int param_2,int param_3);
undefined4 FUN_1000c8e8(char *param_1,char *param_2,char *param_3,char *param_4,char *param_5);
undefined4 FUN_1000ca0c(void);
undefined FUN_1000cb68(void);
int FUN_1000cd38(void);
void FUN_1000ce10(void);
long FUN_1000ce94(FILE *param_1,char *param_2);
int FUN_1000cff0(FILE *param_1);
void FUN_1000d22c(size_t *param_1,char *param_2);
undefined4 FUN_1000d368(FILE *param_1,code *param_2);
void FUN_1000d4dc(void);
undefined4 FUN_1000d6e0(void);
void FUN_1000d988(void);
undefined4 FUN_1000da30(void);
undefined4 FUN_1000dae4(int param_1);
undefined4 FUN_1000dc8c(void);
int FUN_1000ddd4(X509 *param_1,X509 *param_2);
void FUN_1000de44(void);
void FUN_1000de80(void);
void FUN_1000def8(undefined4 param_1);
undefined4 FUN_1000df24(void);
void FUN_1000df4c(undefined4 param_1);
undefined4 FUN_1000df78(void);
void FUN_1000dfa0(undefined4 param_1);
undefined4 FUN_1000dfcc(void);
void FUN_1000dff4(int param_1);
undefined4 FUN_1000e03c(void);
void FUN_1000e064(char *param_1);
undefined4 FUN_1000e164(void);
void FUN_1000e18c(char *param_1);
undefined4 FUN_1000e28c(void);
void FUN_1000e2b4(int param_1);
undefined4 FUN_1000e33c(void);
undefined4 FUN_1000e364(void);
void FUN_1000e38c(void);
void FUN_1000e410(undefined4 param_1);
undefined4 FUN_1000e43c(void);
undefined * FUN_1000e464(int param_1);
void FUN_1000e4a0(undefined4 param_1);
undefined4 FUN_1000e4cc(void);
uint FUN_1000e4f4(uint *param_1);
void FUN_1000e614(uint *param_1,uint *param_2);
void FUN_1000e6d8(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void FUN_1000e730(uint *param_1,undefined4 *param_2);
uint * FUN_1000e89c(uint *param_1,uint *param_2,uint *param_3);
void FUN_1000ebfc(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void FUN_1000ec70(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void FUN_1000ecf4(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void FUN_1000f0f0(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
uint FUN_1000f338(uint *param_1,uint *param_2);
undefined4 FUN_1000f48c(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
undefined4 FUN_1000f518(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
undefined4 FUN_1000f5a4(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
undefined4 FUN_1000f630(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
undefined4 FUN_1000f6bc(uint param_1,undefined4 param_2);
int FUN_1000f7dc(undefined4 param_1,undefined4 param_2);
void FUN_1000f888(undefined4 param_1,undefined4 param_2);
void FUN_1000f8d8(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,undefined4 param_5,undefined4 param_6);
void FUN_1000f914(undefined4 param_1,undefined4 param_2);
undefined8 FUN_1000f988(uint param_1,uint param_2,uint param_3);
void FUN_1000f9d8(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
undefined8 FUN_1000fa10(uint *param_1);
undefined8 FUN_1000fc58(uint param_1,uint param_2,uint param_3);
void _savefpr_14(void);
void _savefpr_15(void);
void _savefpr_16(void);
void _savefpr_17(void);
void _savefpr_18(void);
void _savefpr_19(void);
void _savefpr_20(void);
void _savefpr_21(void);
void _savefpr_22(void);
void _savefpr_23(void);
void _savefpr_24(void);
void _savefpr_25(void);
void _savefpr_26(void);
void _savefpr_27(void);
void _savefpr_28(void);
void _savefpr_29(void);
void _savefpr_30(void);
void _savefpr_31(void);
void _savegpr_14(void);
void _savegpr_15(void);
void _savegpr_16(void);
void _savegpr_17(void);
void _savegpr_18(void);
void _savegpr_19(void);
void _savegpr_20(void);
void _savegpr_21(void);
void _savegpr_22(void);
void _savegpr_23(void);
void _savegpr_24(void);
void _savegpr_25(void);
void _savegpr_26(void);
void _savegpr_27(void);
void _savegpr_28(void);
void _savegpr_29(void);
void _savegpr_30(void);
void _savegpr_31(void);
void _restfpr_14(void);
void _restfpr_15(void);
void _restfpr_16(void);
void _restfpr_17(void);
void _restfpr_18(void);
void _restfpr_19(void);
void _restfpr_20(void);
void _restfpr_21(void);
void _restfpr_22(void);
void _restfpr_23(void);
void _restfpr_24(void);
void _restfpr_25(void);
void _restfpr_26(void);
void _restfpr_27(void);
void _restfpr_28(void);
void _restfpr_29(void);
void _restfpr_30(void);
void _restfpr_31(void);
void _restgpr_14(void);
void _restgpr_15(void);
void _restgpr_16(void);
void _restgpr_17(void);
void _restgpr_18(void);
void _restgpr_19(void);
void _restgpr_20(void);
void _restgpr_21(void);
void _restgpr_22(void);
void _restgpr_23(void);
void _restgpr_24(void);
void _restgpr_25(void);
void _restgpr_26(void);
void _restgpr_27(void);
void _restgpr_28(void);
void _restgpr_29(void);
void _restgpr_30(void);
void _restgpr_31(void);
void _restfpr_14_x(void);
void _restfpr_15_x(void);
void _restfpr_16_x(void);
void _restfpr_17_x(void);
void _restfpr_18_x(void);
void _restfpr_19_x(void);
void _restfpr_20_x(void);
void _restfpr_21_x(void);
void _restfpr_22_x(void);
void _restfpr_23_x(void);
void _restfpr_24_x(void);
void _restfpr_25_x(void);
void _restfpr_26_x(void);
void _restfpr_27_x(void);
void _restfpr_28_x(void);
void _restfpr_29_x(void);
void _restfpr_30_x(void);
void _restfpr_31_x(void);
void _restgpr_14_x(void);
void _restgpr_15_x(void);
void _restgpr_16_x(void);
void _restgpr_17_x(void);
void _restgpr_18_x(void);
void _restgpr_19_x(void);
void _restgpr_20_x(void);
void _restgpr_21_x(void);
void _restgpr_22_x(void);
void _restgpr_23_x(void);
void _restgpr_24_x(void);
void _restgpr_25_x(void);
void _restgpr_26_x(void);
void _restgpr_27_x(void);
void _restgpr_28_x(void);
void _restgpr_29_x(void);
void _restgpr_30_x(void);
void _restgpr_31_x(void);
void FUN_1000fe8c(void);
void FUN_1000fef0(void);
void _fini(void);
void get_encryption_mode_no_auth(void);
int putchar(int __c);
char * strcpy(char *__dest,char *__src);
FILE * popen(char *__command,char *__modes);
int printf(char *__format,...);
int EVP_VerifyFinal(EVP_MD_CTX *ctx,uchar *sigbuf,uint siglen,EVP_PKEY *pkey);
int pclose(FILE *__stream);
int snprintf(char *__s,size_t __maxlen,char *__format,...);
__pid_t getpid(void);
char * fgets(char *__s,int __n,FILE *__stream);
void trimSpaces(void);
void * memcpy(void *__dest,void *__src,size_t __n);
void FIPS_md_ctx_create(void);
int execl(char *__path,char *__arg,...);
void perror(char *__s);
int creat(char *__file,__mode_t __mode);
int puts(char *__s);
int system(char *__command);
void * malloc(size_t __size);
void get_em_vcm_oa_min_fw_version(void);
void get_em_network_info_no_auth(void);
uint sleep(uint __seconds);
void max_file_size(void);
int vsnprintf(char *__s,size_t __maxlen,char *__format,__gnuc_va_list __arg);
void OPENSSL_add_all_algorithms_noconf(void);
dirent * readdir(DIR *__dirp);
int X509_cmp(X509 *a,X509 *b);
void get_em_id(void);
void firmware_mgmt_set_iso_url(void);
EVP_PKEY * X509_get_pubkey(X509 *x);
int fflush(FILE *__stream);
__off_t lseek(int __fd,__off_t __offset,int __whence);
void * sk_pop(_STACK *st);
int BIO_puts(BIO *bp,char *buf);
void check_usb_media_presence(void);
long strtol(char *__nptr,char **__endptr,int __base);
size_t strnlen(char *__string,size_t __maxlen);
void generate_event(void);
void FIPS_digestinit(void);
void FIPS_evp_sha256(void);
int BIO_free(BIO *a);
void * calloc(size_t __nmemb,size_t __size);
ssize_t write(int __fd,void *__buf,size_t __n);
int sk_push(_STACK *st,void *data);
int fprintf(FILE *__stream,char *__format,...);
char * ctime(time_t *__timer);
char * strcat(char *__dest,char *__src);
void FIPS_evp_sha1(void);
void FIPS_evp_sha512(void);
int fseek(FILE *__stream,long __off,int __whence);
void default_ers_settings(void);
_STACK * sk_new(cmp *cmp);
void catchSegv(void);
__pid_t wait(void *__stat_loc);
char * strcasestr(char *__haystack,char *__needle);
char * strstr(char *__haystack,char *__needle);
BIO * BIO_new(BIO_METHOD *type);
ssize_t read(int __fd,void *__buf,size_t __nbytes);
void set_oa_baudrate_info_no_auth(void);
void openlog(char *__ident,int __option,int __facility);
void closelog(void);
int unlink(char *__name);
void firmware_mgmt_get_settings_noauth(void);
void * realloc(void *__ptr,size_t __size);
X509 * PEM_read_bio_X509(BIO *bp,X509 **x,undefined1 *cb,void *u);
void enc_reboot(void);
char * strtok(char *__s,char *__delim);
int memcmp(void *__s1,void *__s2,size_t __n);
int sscanf(char *__s,char *__format,...);
void FIPS_digestupdate(void);
char * strncat(char *__dest,char *__src,size_t __n);
size_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream);
FILE * fopen(char *__filename,char *__modes);
int getopt(int ___argc,char **___argv,char *__shortopts);
void * memset(void *__s,int __c,size_t __n);
long ftell(FILE *__stream);
void firmware_mgmt_set_enabled_no_auth(void);
int fclose(FILE *__stream);
time_t time(time_t *__timer);
DIR * opendir(char *__name);
void syslog(int __pri,char *__fmt,...);
int strcmp(char *__s1,char *__s2);
void remove_subject_hash_fingerprints(void);
int sprintf(char *__s,char *__format,...);
void interpretError(void);
void get_em_vcm_mode_ex(void);
int fsync(int __fd);
int fputc(int __c,FILE *__stream);
void download_partial(void);
void rewind(FILE *__stream);
void disable_snmp(void);
BIO_METHOD * BIO_s_mem(void);
int * __errno_location(void);
void exit(int __status);
int atoi(char *__nptr);
size_t strlen(char *__s);
void __uClibc_start_main(void);
int open(char *__file,int __oflag,...);
void __assert(char *__assertion,char *__file,int __line);
int fputs(char *__s,FILE *__stream);
void firmware_mgmt_set_iso_url_in_flash(void);
int closedir(DIR *__dirp);
void _Jv_RegisterClasses(void);
int close(int __fd);
void get_em_type(void);
void free(void *__ptr);
void __fputc_unlocked(void);
undefined _Jv_RegisterClasses();

